name: Scheduled Swing Scan

on:
  workflow_dispatch: {}
  schedule:
    # 10:30 / 11:30 / 12:30 ET (Monâ€“Fri). During EDT (UTC-4) these are ~14:30/15:30/16:30 UTC.
    - cron: "30 14 * * 1-5"
    - cron: "30 15 * * 1-5"
    - cron: "30 16 * * 1-5"
    # Nightly outcome check after US close (~23:30 UTC)
    - cron: "30 23 * * 1-5"

permissions:
  contents: write

# prevent overlapping runs
concurrency:
  group: swing-scan
  cancel-in-progress: false

jobs:
  run-and-log:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r scripts/requirements.txt

      - name: Run screener and write history files
        env:
          # Make local modules importable (swing_options_screener, etc.)
          PYTHONPATH: .:./scripts
        run: |
          set -e
          mkdir -p data/history data/logs
          # Run the scan; script writes pass_*.csv + updates outcomes.csv
          python scripts/run_and_log.py --universe sp500 --with-options | tee "data/logs/scan_$(date -u +%Y%m%d-%H%M%S).txt"

      # ---------- FIXED COMMIT STEP ----------
      - name: Commit history updates (pass_*.csv, outcomes.csv, logs)
        run: |
          set -e

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Stage whatever changed this run (ignore if patterns don't match)
          git add -A data/history/*.csv 2>/dev/null || true
          git add -A data/logs/*.txt     2>/dev/null || true

          # If nothing was staged, there is nothing to commit/push
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          # Commit first, then rebase onto latest main (safe with autostash), then push
          git commit -m "history: update $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          git fetch origin main
          git -c rebase.autoStash=true pull --rebase origin main
          git push origin HEAD:main
