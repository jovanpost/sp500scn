# ============================================================
# TABLE OF CONTENTS for .github/workflows/schedule.yml
#
#  1) Triggers (manual + cron)
#  2) Permissions
#  3) Concurrency guard
#  4) Job: run-and-log
#     4.1) Repo + Python setup
#     4.2) Business-day / holiday gate (NY time)
#     4.3) Echo current NY time (EST/EDT guardrail)
#     4.4) Run screener and write history files (intraday)
#     4.5) Evaluate outcomes (nightly)
#     4.6) Commit history updates to repo
# ============================================================

name: Scheduled Swing Scan

on:
  workflow_dispatch: {}
  schedule:
    # Intraday scans every 30m from ~09:40 ET through 14:10 ET (Mon–Fri).
    # During EDT (UTC-4) these correspond to ~13:40–18:10 UTC.
    - cron: "40 13 * * 1-5"
    - cron: "10 14 * * 1-5"
    - cron: "40 14 * * 1-5"
    - cron: "10 15 * * 1-5"
    - cron: "40 15 * * 1-5"
    - cron: "10 16 * * 1-5"
    - cron: "40 16 * * 1-5"
    - cron: "10 17 * * 1-5"
    - cron: "40 17 * * 1-5"
    - cron: "10 18 * * 1-5"
    # Nightly outcome check after US close (~23:10 UTC)
    - cron: "10 23 * * 1-5"

permissions:
  contents: write

# ─────────────────────────────────────────────────────────────
# 3) Concurrency — prevent overlapping runs
# ─────────────────────────────────────────────────────────────
concurrency:
  group: swing-scan
  cancel-in-progress: false

jobs:
  run-and-log:
    runs-on: ubuntu-latest

    steps:
      # ─────────────────────────────────────────────────────────
      # 4.1) Repo + Python setup
      # ─────────────────────────────────────────────────────────
      - name: Check out repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      # ─────────────────────────────────────────────────────────
      # 4.2) Business-day / holiday gate (US Markets, NY time)
      # ─────────────────────────────────────────────────────────
      - name: Business-day / holiday gate (US Markets, NY time)
        id: bizgate
        shell: bash
        run: |
          set -e
          export TZ=America/New_York
          TODAY=$(date +%Y-%m-%d)
          DOW=$(date +%u)  # 1..7 (Mon..Sun)

          # Skip weekends
          if [ "$DOW" -gt 5 ]; then
            echo "Weekend in New York – skipping."
            echo "run=no" >> $GITHUB_OUTPUT
            exit 0
          fi

          # US market holidays (full-day) for 2025–2026
          HOLIDAYS=(
            2025-01-01 2025-01-20 2025-02-17 2025-04-18 2025-05-26 2025-06-19 2025-07-04 2025-09-01 2025-11-27 2025-12-25
            2026-01-01 2026-01-19 2026-02-16 2026-04-03 2026-05-25 2026-06-19 2026-07-03 2026-09-07 2026-11-26 2026-12-25
          )
          for H in "${HOLIDAYS[@]}"; do
            if [ "$TODAY" = "$H" ]; then
              echo "US market holiday ($H) – skipping."
              echo "run=no" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          echo "run=yes" >> $GITHUB_OUTPUT

      # ─────────────────────────────────────────────────────────
      # 4.3) Echo current NY time (EST/EDT guardrail)
      # ─────────────────────────────────────────────────────────
      - name: Echo current NY time (guardrail)
        if: steps.bizgate.outputs.run == 'yes'
        run: |
          export TZ=America/New_York
          echo "Current NY time: $(date)"
          echo "Event: $GITHUB_EVENT_NAME  |  Ref: $GITHUB_REF"

      # ─────────────────────────────────────────────────────────
      # 4.4) Run screener via scripts/run_and_log.py + write history files (intraday)
      # ─────────────────────────────────────────────────────────
      - name: Run scripts/run_and_log.py and write history files
        if: steps.bizgate.outputs.run == 'yes' && github.event.schedule != '10 23 * * 1-5'
        env:
          PYTHONPATH: .:./scripts
        run: |
          set -e
          mkdir -p data/history data/logs
          python scripts/run_and_log.py --universe sp500 --with-options | tee "data/logs/scan_$(date -u +%Y%m%d-%H%M%S).txt"

      # ─────────────────────────────────────────────────────────
      # 4.5) Evaluate outcomes (nightly)
      # ─────────────────────────────────────────────────────────
      - name: Evaluate outcomes
        if: steps.bizgate.outputs.run == 'yes' && github.event.schedule == '10 23 * * 1-5'
        env:
          PYTHONPATH: .:./scripts
        run: |
          set -e
          python scripts/evaluate_outcomes.py --mode pending

      # ─────────────────────────────────────────────────────────
      # 4.6) Commit history updates to repo
      # ─────────────────────────────────────────────────────────
      - name: Commit history updates (pass_*.csv, outcomes.csv, logs)
        run: |
          set -e

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add -A data/history/*.csv 2>/dev/null || true
          git add -A data/logs/*.txt     2>/dev/null || true

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "history: update $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          git fetch origin main
          git -c rebase.autoStash=true pull --rebase origin main
          git push origin HEAD:main
