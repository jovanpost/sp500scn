name: Yahoo RAW batch

on:
  workflow_dispatch:
    inputs:
      tickers:
        description: "Comma-separated tickers (e.g. AAPL,MSFT,NVDA)"
        required: true
        default: "AAPL,MSFT"
      start:
        description: "Start date (YYYY-MM-DD)"
        required: false
        default: "1996-01-01"
      end:
        description: "End date (optional; blank = today)"
        required: false
        default: ""

jobs:
  ingest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt || true
          pip install yfinance pandas pyarrow requests supabase

      - name: Ingest via Yahoo RAW batch
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          INPUT_TICKERS: ${{ github.event.inputs.tickers }}
          INPUT_START:   ${{ github.event.inputs.start }}
          INPUT_END:     ${{ github.event.inputs.end }}
        run: |
          python - <<'PY'
          import os, json, time, requests, sys
          from data_lake.storage import Storage
          try:
              from data_lake.ingest import ingest_raw_yahoo_batch
          except Exception as e:
              ingest_raw_yahoo_batch = None
              print("Note: ingest_raw_yahoo_batch import failed:", repr(e))

          UA = ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                "(KHTML, like Gecko) Chrome/124.0 Safari/537.36")

          # Make every requests call look like a real browser and add sane timeouts.
          _orig_request = requests.sessions.Session.request
          def _patched(self, method, url, **kwargs):
              headers = kwargs.get("headers") or {}
              headers.setdefault("User-Agent", UA)
              headers.setdefault("Accept", "application/json,text/plain,*/*")
              headers.setdefault("Accept-Language", "en-US,en;q=0.9")
              kwargs["headers"] = headers
              kwargs.setdefault("timeout", 20)
              return _orig_request(self, method, url, **kwargs)
          requests.sessions.Session.request = _patched

          def probe_yahoo():
              url = "https://query1.finance.yahoo.com/v7/finance/quote?symbols=AAPL"
              try:
                  r = requests.get(url, timeout=10)
                  ok = (r.status_code == 200) and ("quoteResponse" in r.text)
                  return ok, f"status={r.status_code}"
              except Exception as e:
                  return False, repr(e)

          ok_probe, info = probe_yahoo()
          print("Yahoo probe:", ok_probe, info)
          if not ok_probe:
              print("Yahoo is not reachable from this runner right now. No writes attempted.")
              # exit 78 = temporary failure; mark job success so you can re-run later.
              sys.exit(0)

          raw = (os.environ.get("INPUT_TICKERS") or "AAPL,MSFT").strip()
          start = (os.environ.get("INPUT_START") or "1996-01-01").strip()
          end = (os.environ.get("INPUT_END") or "").strip() or None

          tickers = [t.strip().upper() for t in raw.split(",") if t.strip()]
          jobs = [{"ticker": t, "start": start, "end": end} for t in tickers]
          print("Jobs:", jobs)

          s = Storage.from_env()
          print("Storage:", s.diagnostics())

          summary = {"ok": 0, "failed": 0, "results": []}
          try:
              if ingest_raw_yahoo_batch is None:
                  raise RuntimeError("ingest_raw_yahoo_batch not available in this build")
              summary = ingest_raw_yahoo_batch(s, jobs)
          except Exception as e:
              # Make sure we never reference an undefined variable.
              print("ingest_raw_yahoo_batch raised:", repr(e))
              summary = {
                  "ok": 0,
                  "failed": len(jobs),
                  "results": [{"ticker": j["ticker"], "error": str(e)} for j in jobs],
              }

          print("Summary:", json.dumps(summary, indent=2))

          # Only fail if Yahoo was reachable AND nothing succeeded.
          if int(summary.get("ok", 0)) == 0:
              sys.exit(1)
          PY
