name: Yahoo RAW batch

on:
  workflow_dispatch:
    inputs:
      scope:
        description: "Universe: Historical (since 1996) or Current only"
        required: true
        default: "Historical"
        type: choice
        options: ["Historical", "Current"]
      batch_size:
        description: "How many tickers to process this run"
        required: true
        default: "75"
      start:
        description: "Start date (YYYY-MM-DD)"
        required: false
        default: "1996-01-01"
      end:
        description: "End date (blank = today)"
        required: false
        default: ""
      tickers:
        description: "(Optional) CSV tickers to run instead of auto"
        required: false
        default: ""

permissions:
  contents: read

concurrency:
  group: yahoo-raw-batch
  cancel-in-progress: false

jobs:
  plan:
    name: Plan next batch
    runs-on: ubuntu-latest
    outputs:
      tickers_csv: ${{ steps.plan.outputs.tickers_csv }}
      picked: ${{ steps.plan.outputs.picked }}
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SUPABASE_BUCKET: lake
      FORCE_SUPABASE: "1"
      INPUT_TICKERS: ${{ github.event.inputs.tickers }}
      INPUT_SCOPE: ${{ github.event.inputs.scope }}
      INPUT_BATCH_SIZE: ${{ github.event.inputs.batch_size }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (match repo)
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Select tickers (auto unless override provided)
        id: plan
        run: |
          python - <<'PY'
          import os, json
          from data_lake.storage import Storage
          from data_lake.membership import load_membership
          from data_lake.ingest import lake_file_is_raw

          override = (os.getenv("INPUT_TICKERS") or "").strip()
          batch_size = max(1, int(os.getenv("INPUT_BATCH_SIZE") or "50"))
          scope = (os.getenv("INPUT_SCOPE") or "Historical").strip()

          if override:
              raw = [t.strip().upper() for t in override.split(",") if t.strip()]
              picked = raw[:batch_size]
          else:
              s = Storage.from_env()
              df = load_membership(s, cache_salt=s.cache_salt())

              if scope.startswith("Historical"):
                  universe = sorted(df["ticker"].astype(str).str.upper().str.strip().unique().tolist())
              else:
                  cur = df[df["end_date"].isna() | (df["end_date"]=="")] if "end_date" in df else df
                  universe = sorted(cur["ticker"].astype(str).str.upper().str.strip().unique().tolist())

              missing_or_not_raw = []
              for t in universe:
                  has_file = s.exists(f"prices/{t}.parquet")
                  if not has_file:
                      missing_or_not_raw.append(t); continue
                  try:
                      is_raw = lake_file_is_raw(s, t)
                  except Exception:
                      is_raw = False
                  if not is_raw:
                      missing_or_not_raw.append(t)

              picked = missing_or_not_raw[:batch_size]

          tickers_csv = ",".join(picked)
          print("Auto-picked tickers:", tickers_csv)
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"tickers_csv={tickers_csv}\n")
              f.write(f"picked={len(picked)}\n")
          PY

  ingest:
    name: Ingest
    needs: plan
    if: ${{ needs.plan.outputs.picked != '0' || github.event.inputs.tickers != '' }}
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SUPABASE_BUCKET: lake
      FORCE_SUPABASE: "1"
      TICKERS_CSV: ${{ github.event.inputs.tickers != '' && github.event.inputs.tickers || needs.plan.outputs.tickers_csv }}
      INPUT_START: ${{ github.event.inputs.start }}
      INPUT_END: ${{ github.event.inputs.end }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (match repo)
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Run Yahoo RAW ingest
        run: |
          echo "Tickers: $TICKERS_CSV"
          python - <<'PY'
          import os, json, requests
          from data_lake.storage import Storage
          from data_lake.ingest import ingest_raw_yahoo_batch

          tickers = [t.strip().upper() for t in (os.getenv("TICKERS_CSV") or "").split(",") if t.strip()]
          start = (os.getenv("INPUT_START") or "1996-01-01").strip()
          end = (os.getenv("INPUT_END") or "").strip() or None

          jobs = [{"ticker": t, "start": start, "end": end} for t in tickers]
          print("Jobs:", jobs)

          probe = requests.get(
              "https://query2.finance.yahoo.com/v8/finance/chart/AAPL?range=1d&interval=1d",
              headers={"User-Agent": "Mozilla/5.0"},
              timeout=10,
          )
          print(f"Yahoo probe: {probe.ok} {probe.url} status={probe.status_code}")

          s = Storage.from_env()
          summary = ingest_raw_yahoo_batch(s, jobs)
          print("Summary:", json.dumps(summary, indent=2))

          if int(summary.get("ok", 0)) == 0:
              raise SystemExit("All jobs failed")
          PY
