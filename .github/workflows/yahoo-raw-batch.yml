name: Yahoo RAW batch ingest

on:
  workflow_dispatch:
    inputs:
      tickers:
        description: "Comma-separated tickers (e.g. AAPL,MSFT,NVDA)"
        required: true
        default: "AAPL,MSFT"
      start:
        description: "Start date (YYYY-MM-DD)"
        required: false
        default: "1996-01-01"
      end:
        description: "End date (optional; blank means up to today)"
        required: false
        default: ""

jobs:
  ingest:
    runs-on: ubuntu-latest
    env:
      # Make Supabase creds available in all steps
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt || true
          pip install yfinance pandas pyarrow requests

      - name: Ingest via Yahoo RAW batch (skip if Yahoo blocked)
        env:
          TICKERS: ${{ github.event.inputs.tickers }}
          START: ${{ github.event.inputs.start }}
          END: ${{ github.event.inputs.end }}
        run: |
          python - <<'PY'
          import os, sys, json, requests

          # Imports from your repo
          from data_lake.storage import Storage
          from data_lake.ingest import ingest_batch, lake_file_is_raw
          try:
              # New helper (optional)
              from data_lake.ingest import ingest_raw_yahoo_batch  # type: ignore
          except Exception:
              ingest_raw_yahoo_batch = None  # type: ignore

          def yahoo_ok() -> bool:
              """Lightweight connectivity probe to Yahoo quote endpoint."""
              try:
                  r = requests.get(
                      "https://query1.finance.yahoo.com/v7/finance/quote?symbols=AAPL",
                      timeout=8,
                      headers={"User-Agent": "Mozilla/5.0"},
                  )
                  print("Yahoo probe:", r.status_code, "bytes:", len(r.content))
                  return r.ok and "quoteResponse" in r.text
              except Exception as e:
                  print("Yahoo probe error:", e)
                  return False

          raw = (os.getenv("TICKERS") or "").strip()
          start = (os.getenv("START") or "").strip() or "1996-01-01"
          end = (os.getenv("END") or "").strip() or None

          tickers = [t.strip().upper() for t in raw.split(",") if t.strip()]
          if not tickers:
              print("No tickers provided; nothing to do.")
              sys.exit(0)

          jobs = [{"ticker": t, "start": start, "end": end} for t in tickers]
          print("Jobs:", jobs)

          # If Yahoo is blocked from this GitHub runner, skip gracefully.
          if not yahoo_ok():
              print("Yahoo endpoint not reachable from this runner; skipping ingest (not a code error).")
              sys.exit(0)

          s = Storage.from_env()

          if ingest_raw_yahoo_batch:
              print("Using ingest_raw_yahoo_batch (Yahoo RAW).")
              summary = ingest_raw_yahoo_batch(s, jobs)
          else:
              print("ingest_raw_yahoo_batch not available; falling back to ingest_batch.")
              summary = ingest_batch(s, jobs)

          print(json.dumps(summary, indent=2))

          # Only fail if absolutely everything failed.
          if summary.get("ok", 0) == 0:
              raise SystemExit("All jobs failed")
          PY
```0
